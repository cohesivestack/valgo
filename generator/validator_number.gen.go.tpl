// Code generated by Valgo; DO NOT EDIT.

package valgo

{{ range . }}

type Validator{{ .Name }} struct {
	context *ValidatorContext
}

func {{ .Name }}(value {{ .Type }}, nameAndTitle ...string) *Validator{{ .Name }} {
	return &Validator{{ .Name }}{context: NewContext(value, nameAndTitle...)}
}

func (validator *Validator{{ .Name }}) Context() *ValidatorContext {
	return validator.context
}

func (validator *Validator{{ .Name }}) EqualTo(value {{ .Type }}, template ...string) *Validator{{ .Name }} {
	validator.context.AddWithValue(
		func() bool {
			return validator.context.Value().({{ .Type }}) == value
		},
		ErrorKeyEqualTo, value, template...)

	return validator
}

func (validator *Validator{{ .Name }}) GreaterThan(value {{ .Type }}, template ...string) *Validator{{ .Name }} {
	validator.context.AddWithValue(
		func() bool {
			return validator.context.Value().({{ .Type }}) > value
		},
		ErrorKeyGreaterThan, value, template...)

	return validator
}

func (validator *Validator{{ .Name }}) GreaterOrEqualThan(value {{ .Type }}, template ...string) *Validator{{ .Name }} {
	validator.context.AddWithValue(
		func() bool {
			return validator.context.Value().({{ .Type }}) >= value
		},
		ErrorKeyGreaterOrEqualTo, value, template...)

	return validator
}

func (validator *Validator{{ .Name }}) LessThan(value {{ .Type }}, template ...string) *Validator{{ .Name }} {
	validator.context.AddWithValue(
		func() bool {
			return validator.context.Value().({{ .Type }}) < value
		},
		ErrorKeyLessThan, value, template...)

	return validator
}

func (validator *Validator{{ .Name }}) LessOrEqualTo(value {{ .Type }}, template ...string) *Validator{{ .Name }} {
	validator.context.AddWithValue(
		func() bool {
			return validator.context.Value().({{ .Type }}) <= value
		},
		ErrorKeyLessOrEqualTo, value, template...)

	return validator
}

func (validator *Validator{{ .Name }}) Zero(value {{ .Type }}, template ...string) *Validator{{ .Name }} {
	validator.context.AddWithValue(
		func() bool {
			return validator.context.Value().({{ .Type }}) == 0
		},
		ErrorKeyZero, value, template...)

	return validator
}

func (validator *Validator{{ .Name }}) Passing(function func(v {{ .Type }}) bool, template ...string) *Validator{{ .Name }} {
	validator.context.Add(
		func() bool {
			return function(validator.context.Value().({{ .Type }}))
		},
		ErrorKeyPassing, template...)

	return validator
}

func (validator *Validator{{ .Name }}) InSlice(slice []{{ .Type }}, template ...string) *Validator{{ .Name }} {
	validator.context.AddWithValue(
		func() bool {
			for _, v := range slice {
				if validator.context.Value() == v {
					return true
				}
			}
			return false
		},
		ErrorKeyInSlice, validator.context.Value(), template...)

	return validator
}

func (validator *Validator{{ .Name }}) Not() *Validator{{ .Name }} {
	validator.context.Not()

	return validator
}

{{ end }}